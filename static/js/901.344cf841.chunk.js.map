{"version":3,"file":"static/js/901.344cf841.chunk.js","mappings":"6JAeA,IAbe,WACX,OACK,SAAC,KAAD,CACPA,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGV,C,yHCmCD,UA5CgB,WACd,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,8GAEcC,EAAAA,EAAAA,IAAaX,GAF3B,OAETY,EAFS,OAGfR,EAAWQ,GAHI,gDAKfJ,GAAS,GALM,yBAOfF,GAAa,GAPE,4EAAH,qDAUhBI,GACD,GAAE,CAACV,IACAK,GACK,SAAC,IAAD,IAELE,GACK,uBAAG,4CAGV,4BACE,wBAAI,aACHJ,GACC,wBACGA,EAAQU,KAAI,SAACC,GAAD,OACX,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOd,GADL,OAQf,uBAAG,4BAIV,C,4MC7CKiB,EAAS,mCACTC,EAAU,+BAEFC,EAAmB,mCAAG,+GAETC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,uBAA2C,CAChEG,OAAQ,CACNC,QAASL,KAJmB,cAE1BM,EAF0B,OAO1BC,EAAiBD,EAASE,KAAKC,QAPL,kBAQzBF,GARyB,yDAUzB,IAVyB,yDAAH,qDAcpBG,EAAiB,mCAAG,WAAOC,GAAP,oGAENR,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAAqC,CAC1DG,OAAQ,CACNC,QAASL,EACTW,MAAOA,KALkB,cAEvBL,EAFuB,OAQvBE,EAAOF,EAASE,KAChBI,EAAeJ,EAAKC,QAAQb,KAAI,SAAAiB,GAAK,yBACtCA,GADsC,IAEzCC,QAASD,EAAM9B,IAF0B,IATd,qCAexByB,GAfwB,IAgB3BC,QAASG,KAhBkB,oGAAH,sDAwBjBG,EAAiB,mCAAG,WAAOhC,GAAP,sGAENoB,EAAAA,EAAAA,IAAA,6CACiBpB,EADjB,oBAC+BiB,IAHzB,cAEvBM,EAFuB,SAKSA,EAASE,KAAvCQ,EALqB,EAKrBA,YAAaC,EALQ,EAKRA,aALQ,qCAOxBX,EAASE,MAPe,IAQ3BQ,YAAAA,EACAC,aAAAA,KAT2B,sCAYvB,IAAIC,MAAM,gCAZa,yDAAH,sDAiBjBC,EAAS,mCAAG,WAAOpC,GAAP,oGAEEoB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACDlB,EADC,4BACqBiB,IAHvB,cAEfM,EAFe,OAKbc,EAASd,EAASE,KAAlBY,KACFC,EAAcD,EAAKxB,KAAI,SAAC0B,GAAD,eAAC,UACzBA,GADwB,IAE3BC,YAAaD,EAAME,aAAN,0CAC0BF,EAAME,cACzC,MAJuB,IANR,kBAYd,CACLJ,KAAMC,IAba,sCAgBf,IAAIH,MAAM,gCAhBK,yDAAH,sDAmBTxB,EAAY,mCAAG,WAAOoB,GAAP,kGAEDX,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8Ba,EAA9B,YAAiD,CACtEV,OAAQ,CACNC,QAASL,KAJW,cAElBM,EAFkB,OAQlBpB,EAAUoB,EAASE,KAAKC,QARN,kBASjBvB,GATiB,yDAWjB,IAXiB,yDAAH,qD","sources":["components/loader/Loader.js","page/reviews/Reviews.js","serviсe/Api.js"],"sourcesContent":["\nimport { Circles } from  'react-loader-spinner'\nconst Loader = () => {\n    return(\n         <Circles\n  height=\"200\"\n  width=\"200\"\n  color=\"#4fa94d\"\n  ariaLabel=\"circles-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n/> \n    )\n}\nexport default Loader\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchReviews } from '../../serviсe/Api';\nimport Loader from '../../components/loader/Loader';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const fetchedReviews = await fetchReviews(id);\n        setReviews(fetchedReviews);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReviews();\n  }, [id]);\n  if (isLoading) {\n    return <Loader />;\n  }\n  if (error) {\n    return <p>Error occurred while fetching reviews.</p>;\n  }\n  return (\n    <div>\n      <h2>Reviews:</h2>\n      {reviews ? (\n        <ul>\n          {reviews.map((review) => (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    return trendingMovies;\n  } catch (error) {\n    return [];\n  }\n};\n\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    const data = response.data;\n    const moviesWithId = data.results.map(movie => ({\n      ...movie,\n      movieId: movie.id\n    }));\n\n    return {\n      ...data,\n      results: moviesWithId\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","id","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useEffect","getReviews","fetchReviews","fetchedReviews","map","review","author","content","ApiKey","BaseUrl","fetchTrendingMovies","axios","params","api_key","response","trendingMovies","data","results","fetchSearchMovies","query","moviesWithId","movie","movieId","fetchMovieDetails","poster_path","vote_average","Error","fetchCast","cast","updatedCast","actor","profilePath","profile_path"],"sourceRoot":""}