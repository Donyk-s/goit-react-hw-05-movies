{"version":3,"file":"static/js/118.ea9bbdab.chunk.js","mappings":"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","sources":["page/movieDetails/MovieDetails.js","serviсe/Api.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link, useParams, useLocation, Outlet } from \"react-router-dom\";\nimport { fetchMovieDetails } from '../../serviсe/Api';\nimport { BiChevronsLeft } from \"react-icons/bi\"\nimport { Suspense } from \"react\";\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? \"/\";\n\n  const getMovieById = async (id) => {\n    try {\n      const data = await fetchMovieDetails(id);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching movie details:\", error);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      const movieData = await getMovieById(id);\n      setMovie(movieData);\n    };\n\n    fetchMovie();\n  }, [id]);\n\n  if (!movie) {\n    return <p>Loading...</p>;\n  }\n  \n  return (\n    <main>\n       <Link to={backLinkHref}>\n        <BiChevronsLeft/>Back to Home page</Link>\n     \n      <h1>{movie.title}</h1>\n      \n      <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\n      <p>Overview: {movie.overview}</p>\n      <p>Rating: {movie.vote_average}</p>\n      <ul>\n        <li>\n          <Link to={`/movies/${id}/cast`}>Cast</Link>\n        </li>\n        <li>\n          <Link to={`/movies/${id}/reviews`}>Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading subpage...</div>}></Suspense>\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;\n\n\n","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    console.log(\"Отримано трендові фільми:\", trendingMovies);\n    return trendingMovies;\n  } catch (error) {\n    console.error('Помилка при отриманні трендових фільмів:', error);\n    return [];\n  }\n};\n\n// export const fetchSearchMovies = async (query) => {\n//   try {\n//     const response = await axios.get(`${BaseUrl}/search/movie`, {\n//       params: {\n//         api_key: ApiKey,\n//         query: query\n//       }\n//     });\n//     const data = response.data;\n//     return data;\n//   } catch (error) {\n//     console.error('Error fetching search movies:', error);\n//     throw error;\n//   }\n// }\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    const data = response.data;\n    const moviesWithId = data.results.map(movie => ({\n      ...movie,\n      movieId: movie.id\n    }));\n\n    return {\n      ...data,\n      results: moviesWithId\n    };\n  } catch (error) {\n    console.error('Error fetching search movies:', error);\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["id","useParams","useState","movie","setMovie","backLinkHref","useLocation","state","from","getMovieById","fetchMovieDetails","data","console","error","useEffect","fetchMovie","movieData","to","title","src","poster_path","alt","overview","vote_average","Suspense","fallback","ApiKey","BaseUrl","fetchTrendingMovies","axios","params","api_key","response","trendingMovies","results","log","fetchSearchMovies","query","moviesWithId","map","movieId","Error","fetchCast","cast","updatedCast","actor","profilePath","profile_path","fetchReviews","reviews"],"sourceRoot":""}