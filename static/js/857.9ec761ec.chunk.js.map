{"version":3,"file":"static/js/857.9ec761ec.chunk.js","mappings":"yNA6BA,UAxBa,WACX,OAA4CA,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEDC,EAAAA,EAAAA,MAFC,OAEhBC,EAFgB,OAGtBJ,EAAkBI,GAHI,gDAKtBC,QAAQC,MAAM,iCAAd,MALsB,yDAAH,qDASvBJ,GACD,GAAE,KAGD,6BACE,qCACA,SAAC,IAAD,CAAYE,OAAQL,MAGzB,C,kEC1BD,EAA6B,+B,SCqB7B,EAlBoB,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OAErB,OACE,eAAIG,UAAWC,EAAf,SACGJ,EAAOK,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SACGF,EAAMG,SAFFH,EAAME,GADA,KAStB,C,uMCfKE,EAAS,mCACTC,EAAU,+BAEFZ,EAAmB,mCAAG,+GAETa,EAAAA,EAAAA,IAAA,UAAaD,EAAb,uBAA2C,CAChEE,OAAQ,CACNC,QAASJ,KAJmB,cAE1BK,EAF0B,OAO1BpB,EAAiBoB,EAASC,KAAKC,QACrChB,QAAQiB,IAAI,0IAA6BvB,GART,kBASzBA,GATyB,uCAWhCM,QAAQC,MAAM,0NAAd,MAXgC,kBAYzB,IAZyB,yDAAH,qDA+BpBiB,EAAiB,mCAAG,WAAOC,GAAP,oGAENR,EAAAA,EAAAA,IAAA,UAAaD,EAAb,iBAAqC,CAC1DE,OAAQ,CACNC,QAASJ,EACTU,MAAOA,KALkB,cAEvBL,EAFuB,OAQvBC,EAAOD,EAASC,KAChBK,EAAeL,EAAKC,QAAQZ,KAAI,SAAAC,GAAK,yBACtCA,GADsC,IAEzCgB,QAAShB,EAAME,IAF0B,IATd,qCAexBQ,GAfwB,IAgB3BC,QAASI,KAhBkB,sCAmB7BpB,QAAQC,MAAM,gCAAd,MAnB6B,8DAAH,sDAyBjBqB,EAAiB,mCAAG,WAAOf,GAAP,sGAENI,EAAAA,EAAAA,IAAA,6CACiBJ,EADjB,oBAC+BE,IAHzB,cAEvBK,EAFuB,SAKSA,EAASC,KAAvCQ,EALqB,EAKrBA,YAAaC,EALQ,EAKRA,aALQ,qCAOxBV,EAASC,MAPe,IAQ3BQ,YAAAA,EACAC,aAAAA,KAT2B,sCAYvB,IAAIC,MAAM,gCAZa,yDAAH,sDAiBjBC,EAAS,mCAAG,WAAOnB,GAAP,oGAEEI,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACDH,EADC,4BACqBE,IAHvB,cAEfK,EAFe,OAKba,EAASb,EAASC,KAAlBY,KACFC,EAAcD,EAAKvB,KAAI,SAACyB,GAAD,eAAC,UACzBA,GADwB,IAE3BC,YAAaD,EAAME,aAAN,0CAC0BF,EAAME,cACzC,MAJuB,IANR,kBAYd,CACLJ,KAAMC,IAba,sCAgBf,IAAIH,MAAM,gCAhBK,yDAAH,sDAmBTO,EAAY,mCAAG,WAAOX,GAAP,kGAEDV,EAAAA,EAAAA,IAAA,UAAaD,EAAb,kBAA8BW,EAA9B,YAAiD,CACtET,OAAQ,CACNC,QAASJ,KAJW,cAElBK,EAFkB,OAQlBmB,EAAUnB,EAASC,KAAKC,QARN,kBASjBiB,GATiB,uCAWxBjC,QAAQC,MAAM,0BAAd,MAXwB,kBAYjB,IAZiB,yDAAH,qD","sources":["components/home/Home.js","webpack://react-homework-template/./src/components/moviesList/MoviesList.module.css?a81a","components/moviesList/Movieslist.js","serviсe/Api.js"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from '../../serviсe/Api';\nimport MoviesList from '../moviesList/Movieslist';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const getTrendingMovies = async () => {\n      try {\n        const movies = await fetchTrendingMovies();\n        setTrendingMovies(movies);\n      } catch (error) {\n        console.error('Error getting trending movies:', error);\n      }\n    };\n\n    getTrendingMovies();\n  }, []);\n\n  return (\n    <main>\n      <h1>Welcome</h1>\n      <MoviesList movies={trendingMovies} />\n    </main>\n  );\n}\n\nexport default Home;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__46PAX\"};","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css'\n\n const MoviesList = ({ movies }) => {\n\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`}>\n            {movie.title }\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\nexport default MoviesList","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    console.log(\"Отримано трендові фільми:\", trendingMovies);\n    return trendingMovies;\n  } catch (error) {\n    console.error('Помилка при отриманні трендових фільмів:', error);\n    return [];\n  }\n};\n\n// export const fetchSearchMovies = async (query) => {\n//   try {\n//     const response = await axios.get(`${BaseUrl}/search/movie`, {\n//       params: {\n//         api_key: ApiKey,\n//         query: query\n//       }\n//     });\n//     const data = response.data;\n//     return data;\n//   } catch (error) {\n//     console.error('Error fetching search movies:', error);\n//     throw error;\n//   }\n// }\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    const data = response.data;\n    const moviesWithId = data.results.map(movie => ({\n      ...movie,\n      movieId: movie.id\n    }));\n\n    return {\n      ...data,\n      results: moviesWithId\n    };\n  } catch (error) {\n    console.error('Error fetching search movies:', error);\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["useState","trendingMovies","setTrendingMovies","useEffect","getTrendingMovies","fetchTrendingMovies","movies","console","error","className","css","map","movie","to","id","title","ApiKey","BaseUrl","axios","params","api_key","response","data","results","log","fetchSearchMovies","query","moviesWithId","movieId","fetchMovieDetails","poster_path","vote_average","Error","fetchCast","cast","updatedCast","actor","profilePath","profile_path","fetchReviews","reviews"],"sourceRoot":""}