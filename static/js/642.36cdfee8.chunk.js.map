{"version":3,"file":"static/js/642.36cdfee8.chunk.js","mappings":"6JAeA,IAbe,WACX,OACK,SAAC,KAAD,CACPA,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGV,C,sJCbD,EAA2B,uB,SCyD3B,EAnDa,WACX,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,8GAEOC,EAAAA,EAAAA,GAAUX,GAFjB,OAENY,EAFM,OAGZR,EAAQQ,EAAKT,MAHD,gDAKZK,GAAS,GALG,yBAOZF,GAAa,GAPD,4EAAH,qDAUbI,GACD,GAAE,CAACV,IACAK,GACK,SAACQ,EAAA,EAAD,IAELN,GACK,uBAAG,gCAIV,yBACGJ,GACC,eAAIW,UAAWC,EAAf,SACGZ,EAAKa,KAAI,SAACC,GAAD,OACR,2BACE,wBAAKA,EAAMC,QACX,yBAAG,cAAYD,EAAME,aACpBF,EAAMG,cACL,gBAAKC,IAAG,0CAAqCJ,EAAMG,cAAgBE,IAAKL,EAAMC,QAE9E,gBAAKG,IAjCA,6EAiCiBC,IAAKL,EAAMC,SAN5BD,EAAMM,QADP,OAaZ,uBAAG,wDAIV,C,4MCtDKC,EAAS,mCACTC,EAAU,+BAEFC,EAAmB,mCAAG,+GAETC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,uBAA2C,CAChEG,OAAQ,CACNC,QAASL,KAJmB,cAE1BM,EAF0B,OAO1BC,EAAiBD,EAASlB,KAAKoB,QAPL,kBAQzBD,GARyB,yDAUzB,IAVyB,yDAAH,qDAcpBE,EAAiB,mCAAG,WAAOC,GAAP,gGAENP,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAAqC,CAC1DG,OAAQ,CACNC,QAASL,EACTU,MAAOA,KALkB,cAEvBJ,EAFuB,yBAStBA,EAASlB,KAAKoB,SATQ,oGAAH,sDAgBjBG,EAAiB,mCAAG,WAAOnC,GAAP,sGAEN2B,EAAAA,EAAAA,IAAA,6CACiB3B,EADjB,oBAC+BwB,IAHzB,cAEvBM,EAFuB,SAKSA,EAASlB,KAAvCwB,EALqB,EAKrBA,YAAaC,EALQ,EAKRA,aALQ,qCAOxBP,EAASlB,MAPe,IAQ3BwB,YAAAA,EACAC,aAAAA,KAT2B,sCAYvB,IAAIC,MAAM,gCAZa,yDAAH,sDAiBjB3B,EAAS,mCAAG,WAAOX,GAAP,oGAEE2B,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACDzB,EADC,4BACqBwB,IAHvB,cAEfM,EAFe,OAKb3B,EAAS2B,EAASlB,KAAlBT,KACFoC,EAAcpC,EAAKa,KAAI,SAACC,GAAD,eAAC,UACzBA,GADwB,IAE3BuB,YAAavB,EAAMG,aAAN,0CAC0BH,EAAMG,cACzC,MAJuB,IANR,kBAYd,CACLjB,KAAMoC,IAba,sCAgBf,IAAID,MAAM,gCAhBK,yDAAH,sDAmBTG,EAAY,mCAAG,WAAOC,GAAP,kGAEDf,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8BiB,EAA9B,YAAiD,CACtEd,OAAQ,CACNC,QAASL,KAJW,cAElBM,EAFkB,OAQlBa,EAAUb,EAASlB,KAAKoB,QARN,kBASjBW,GATiB,yDAWjB,IAXiB,yDAAH,qD","sources":["components/loader/Loader.js","webpack://react-homework-template/./src/page/cast/Cast.module.css?8ed4","page/cast/Cast.js","serviсe/Api.js"],"sourcesContent":["\nimport { Circles } from  'react-loader-spinner'\nconst Loader = () => {\n    return(\n         <Circles\n  height=\"200\"\n  width=\"200\"\n  color=\"#4fa94d\"\n  ariaLabel=\"circles-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n/> \n    )\n}\nexport default Loader\n","// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__7fOsP\"};","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from '../../serviсe/Api';\nimport Loader from \"components/loader/Loader\";\n\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=400x250';\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const data = await fetchCast(id);\n        setCast(data.cast);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCast();\n  }, [id]);\n  if (isLoading) {\n    return <Loader />;\n  }\n  if (error) {\n    return <p>Sorry, we have a poblem...</p>;\n  }\n\n  return (\n    <div>\n      {cast ? (\n        <ul className={css.castList}>\n          {cast.map((actor) => (\n            <li key={actor.cast_id}>\n              <h3>{actor.name}</h3>\n              <p>Character: {actor.character}</p>\n              {actor.profile_path ? (\n                <img src={`https://image.tmdb.org/t/p/w400/${actor.profile_path}`} alt={actor.name} />\n              ) : (\n                <img src={defaultImg} alt={actor.name} />\n              )}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Sorry, there is no such information at the moment.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    return trendingMovies;\n  } catch (error) {\n    return [];\n  }\n};\n\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","id","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","useEffect","getCast","fetchCast","data","Loader","className","css","map","actor","name","character","profile_path","src","alt","cast_id","ApiKey","BaseUrl","fetchTrendingMovies","axios","params","api_key","response","trendingMovies","results","fetchSearchMovies","query","fetchMovieDetails","poster_path","vote_average","Error","updatedCast","profilePath","fetchReviews","movieId","reviews"],"sourceRoot":""}