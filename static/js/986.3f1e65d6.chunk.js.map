{"version":3,"file":"static/js/986.3f1e65d6.chunk.js","mappings":"6JAeA,IAbe,WACX,OACK,SAAC,KAAD,CACPA,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGV,C,+ECbD,EAA6B,+B,SC2B7B,EAxBoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACfC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIC,UAAWC,EAAf,SACGJ,EAAOK,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAKC,MAAO,CAACC,KAAMT,GAA9C,SACGK,EAAMK,SAFFL,EAAME,GADA,KAStB,C,0HCkBD,UA/Ba,WACX,OAA4CI,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEDC,EAAAA,EAAAA,MAFC,OAEhBrB,EAFgB,OAGtBc,EAAkBd,GAClBgB,GAAa,GAJS,gDAMtBE,GAAS,GANa,yDAAH,qDASvBE,GACD,GAAE,IACCL,GACK,SAAC,IAAD,IAELE,GACK,uBAAG,oDAGV,6BACE,wBAAI,aACJ,SAAC,IAAD,CAAYjB,OAAQa,MAGzB,C,4MChCKS,EAAS,mCACTC,EAAU,+BAEFF,EAAmB,mCAAG,+GAETG,EAAAA,EAAAA,IAAA,UAAaD,EAAb,uBAA2C,CAChEE,OAAQ,CACNC,QAASJ,KAJmB,cAE1BK,EAF0B,OAO1Bd,EAAiBc,EAASC,KAAKC,QAPL,kBAQzBhB,GARyB,yDAUzB,IAVyB,yDAAH,qDAcpBiB,EAAiB,mCAAG,WAAOC,GAAP,gGAENP,EAAAA,EAAAA,IAAA,UAAaD,EAAb,iBAAqC,CAC1DE,OAAQ,CACNC,QAASJ,EACTS,MAAOA,KALkB,cAEvBJ,EAFuB,yBAStBA,EAASC,KAAKC,SATQ,oGAAH,sDAgBjBG,EAAiB,mCAAG,WAAOxB,GAAP,sGAENgB,EAAAA,EAAAA,IAAA,6CACiBhB,EADjB,oBAC+Bc,IAHzB,cAEvBK,EAFuB,SAKSA,EAASC,KAAvCK,EALqB,EAKrBA,YAAaC,EALQ,EAKRA,aALQ,qCAOxBP,EAASC,MAPe,IAQ3BK,YAAAA,EACAC,aAAAA,KAT2B,sCAYvB,IAAIC,MAAM,gCAZa,yDAAH,sDAiBjBC,EAAS,mCAAG,WAAO5B,GAAP,oGAEEgB,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACDf,EADC,4BACqBc,IAHvB,cAEfK,EAFe,OAKbU,EAASV,EAASC,KAAlBS,KACFC,EAAcD,EAAKhC,KAAI,SAACkC,GAAD,eAAC,UACzBA,GADwB,IAE3BC,YAAaD,EAAME,aAAN,0CAC0BF,EAAME,cACzC,MAJuB,IANR,kBAYd,CACLJ,KAAMC,IAba,sCAgBf,IAAIH,MAAM,gCAhBK,yDAAH,sDAmBTO,EAAY,mCAAG,WAAOC,GAAP,kGAEDnB,EAAAA,EAAAA,IAAA,UAAaD,EAAb,kBAA8BoB,EAA9B,YAAiD,CACtElB,OAAQ,CACNC,QAASJ,KAJW,cAElBK,EAFkB,OAQlBiB,EAAUjB,EAASC,KAAKC,QARN,kBASjBe,GATiB,yDAWjB,IAXiB,yDAAH,qD","sources":["components/loader/Loader.js","webpack://react-homework-template/./src/components/moviesList/MoviesList.module.css?a81a","components/moviesList/Movieslist.js","page/home/Home.js","serviсe/Api.js"],"sourcesContent":["\nimport { Circles } from  'react-loader-spinner'\nconst Loader = () => {\n    return(\n         <Circles\n  height=\"200\"\n  width=\"200\"\n  color=\"#4fa94d\"\n  ariaLabel=\"circles-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n/> \n    )\n}\nexport default Loader\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__46PAX\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css'\n\n const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`}state={{from: location }}>\n            {movie.title }\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default MoviesList","import React, { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from '../../serviсe/Api';\nimport MoviesList from '../../components/moviesList/Movieslist';\nimport Loader from '../../components/loader/Loader';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); \n  const [error, setError] = useState(false); \n \n  useEffect(() => {\n    const getTrendingMovies = async () => {\n      try {\n        const movies = await fetchTrendingMovies();\n        setTrendingMovies(movies);\n        setIsLoading(false); \n      } catch (error) {\n        setError(true); \n      }\n    };\n    getTrendingMovies();\n  }, []);\n  if (isLoading) {\n    return <Loader />; \n  }\n  if (error) {\n    return <p>Error occurred while fetching trending movies.</p>; \n  }\n  return (\n    <main>\n      <h1>Welcome</h1>\n      <MoviesList movies={trendingMovies} />\n    </main>\n  );\n}\n\nexport default Home;\n","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    return trendingMovies;\n  } catch (error) {\n    return [];\n  }\n};\n\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","movies","location","useLocation","className","css","map","movie","to","id","state","from","title","useState","trendingMovies","setTrendingMovies","isLoading","setIsLoading","error","setError","useEffect","getTrendingMovies","fetchTrendingMovies","ApiKey","BaseUrl","axios","params","api_key","response","data","results","fetchSearchMovies","query","fetchMovieDetails","poster_path","vote_average","Error","fetchCast","cast","updatedCast","actor","profilePath","profile_path","fetchReviews","movieId","reviews"],"sourceRoot":""}