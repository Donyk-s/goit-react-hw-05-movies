{"version":3,"file":"static/js/901.3aab96f7.chunk.js","mappings":"yNAwCA,UApCgB,WACd,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,8GAEcC,EAAAA,EAAAA,IAAaP,GAF3B,OAETQ,EAFS,OAGfJ,EAAWI,GAHI,gDAKfC,QAAQC,MAAM,0BAAd,MALe,yDAAH,qDAShBJ,GACD,GAAE,CAACN,KAGF,4BACE,qCACCG,GACC,wBACGA,EAAQQ,KAAI,SAACC,GAAD,OACX,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOZ,GADL,OAQf,gDAIP,C,uMCpCKe,EAAS,mCACTC,EAAU,+BAEFC,EAAmB,mCAAG,+GAETC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,uBAA2C,CAChEG,OAAQ,CACNC,QAASL,KAJmB,cAE1BM,EAF0B,OAO1BC,EAAiBD,EAASE,KAAKC,QACrCf,QAAQgB,IAAI,0IAA6BH,GART,kBASzBA,GATyB,uCAWhCb,QAAQC,MAAM,0NAAd,MAXgC,kBAYzB,IAZyB,yDAAH,qDA+BpBgB,EAAiB,mCAAG,WAAOC,GAAP,oGAENT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAAqC,CAC1DG,OAAQ,CACNC,QAASL,EACTY,MAAOA,KALkB,cAEvBN,EAFuB,OAQvBE,EAAOF,EAASE,KAChBK,EAAeL,EAAKC,QAAQb,KAAI,SAAAkB,GAAK,yBACtCA,GADsC,IAEzCC,QAASD,EAAM7B,IAF0B,IATd,qCAexBuB,GAfwB,IAgB3BC,QAASI,KAhBkB,sCAmB7BnB,QAAQC,MAAM,gCAAd,MAnB6B,8DAAH,sDAyBjBqB,EAAiB,mCAAG,WAAO/B,GAAP,sGAENkB,EAAAA,EAAAA,IAAA,6CACiBlB,EADjB,oBAC+Be,IAHzB,cAEvBM,EAFuB,SAKSA,EAASE,KAAvCS,EALqB,EAKrBA,YAAaC,EALQ,EAKRA,aALQ,qCAOxBZ,EAASE,MAPe,IAQ3BS,YAAAA,EACAC,aAAAA,KAT2B,sCAYvB,IAAIC,MAAM,gCAZa,yDAAH,sDAiBjBC,EAAS,mCAAG,WAAOnC,GAAP,oGAEEkB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACDhB,EADC,4BACqBe,IAHvB,cAEfM,EAFe,OAKbe,EAASf,EAASE,KAAlBa,KACFC,EAAcD,EAAKzB,KAAI,SAAC2B,GAAD,eAAC,UACzBA,GADwB,IAE3BC,YAAaD,EAAME,aAAN,0CAC0BF,EAAME,cACzC,MAJuB,IANR,kBAYd,CACLJ,KAAMC,IAba,sCAgBf,IAAIH,MAAM,gCAhBK,yDAAH,sDAmBT3B,EAAY,mCAAG,WAAOuB,GAAP,kGAEDZ,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8Bc,EAA9B,YAAiD,CACtEX,OAAQ,CACNC,QAASL,KAJW,cAElBM,EAFkB,OAQlBlB,EAAUkB,EAASE,KAAKC,QARN,kBASjBrB,GATiB,uCAWxBM,QAAQC,MAAM,0BAAd,MAXwB,kBAYjB,IAZiB,yDAAH,qD","sources":["page/reviews/Reviews.js","serviсe/Api.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchReviews } from '../../serviсe/Api';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const fetchedReviews = await fetchReviews(id);\n        setReviews(fetchedReviews);\n      } catch (error) {\n        console.error(\"Error fetching reviews:\", error);\n      }\n    };\n\n    getReviews();\n  }, [id]);\n\n  return (\n    <div>\n      <h2>Reviews:</h2>\n      {reviews ? (\n        <ul>\n          {reviews.map((review) => (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Loading reviews...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    console.log(\"Отримано трендові фільми:\", trendingMovies);\n    return trendingMovies;\n  } catch (error) {\n    console.error('Помилка при отриманні трендових фільмів:', error);\n    return [];\n  }\n};\n\n// export const fetchSearchMovies = async (query) => {\n//   try {\n//     const response = await axios.get(`${BaseUrl}/search/movie`, {\n//       params: {\n//         api_key: ApiKey,\n//         query: query\n//       }\n//     });\n//     const data = response.data;\n//     return data;\n//   } catch (error) {\n//     console.error('Error fetching search movies:', error);\n//     throw error;\n//   }\n// }\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    const data = response.data;\n    const moviesWithId = data.results.map(movie => ({\n      ...movie,\n      movieId: movie.id\n    }));\n\n    return {\n      ...data,\n      results: moviesWithId\n    };\n  } catch (error) {\n    console.error('Error fetching search movies:', error);\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["id","useParams","useState","reviews","setReviews","useEffect","getReviews","fetchReviews","fetchedReviews","console","error","map","review","author","content","ApiKey","BaseUrl","fetchTrendingMovies","axios","params","api_key","response","trendingMovies","data","results","log","fetchSearchMovies","query","moviesWithId","movie","movieId","fetchMovieDetails","poster_path","vote_average","Error","fetchCast","cast","updatedCast","actor","profilePath","profile_path"],"sourceRoot":""}