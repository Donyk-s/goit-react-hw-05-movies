{"version":3,"file":"static/js/642.a51707a1.chunk.js","mappings":"sPACA,EAA2B,uB,SC6C3B,EAzCa,WACX,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,8GAEOC,EAAAA,EAAAA,GAAUP,GAFjB,OAENQ,EAFM,OAGZJ,EAAQI,EAAKL,MAHD,gDAKZM,QAAQC,MAAM,6BAAd,MALY,yDAAH,qDASbJ,GACD,GAAE,CAACN,KAIF,yBACGG,GACD,eAAIQ,UAAWC,EAAf,SACGT,EAAKU,KAAI,SAACC,GAAD,OACR,2BACE,wBAAKA,EAAMC,QACX,uCAAeD,EAAME,aACpBF,EAAMG,cACL,gBAAKC,IAAG,0CAAqCJ,EAAMG,cAAgBE,IAAKL,EAAMC,QAE9E,gBAAKG,IA1BE,8EA0BeC,IAAKL,EAAMC,SAN5BD,EAAMM,QADP,OAaZ,+EAIL,C,uMC1CKC,EAAS,mCACTC,EAAU,+BAEFC,EAAmB,mCAAG,+GAETC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,uBAA2C,CAChEG,OAAQ,CACNC,QAASL,KAJmB,cAE1BM,EAF0B,OAO1BC,EAAiBD,EAASnB,KAAKqB,QACrCpB,QAAQqB,IAAI,0IAA6BF,GART,kBASzBA,GATyB,uCAWhCnB,QAAQC,MAAM,0NAAd,MAXgC,kBAYzB,IAZyB,yDAAH,qDA+BpBqB,EAAiB,mCAAG,WAAOC,GAAP,oGAENR,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAAqC,CAC1DG,OAAQ,CACNC,QAASL,EACTW,MAAOA,KALkB,cAEvBL,EAFuB,OAQvBnB,EAAOmB,EAASnB,KAChByB,EAAezB,EAAKqB,QAAQhB,KAAI,SAAAqB,GAAK,yBACtCA,GADsC,IAEzCC,QAASD,EAAMlC,IAF0B,IATd,qCAexBQ,GAfwB,IAgB3BqB,QAASI,KAhBkB,sCAmB7BxB,QAAQC,MAAM,gCAAd,MAnB6B,8DAAH,sDAyBjB0B,EAAiB,mCAAG,WAAOpC,GAAP,sGAENwB,EAAAA,EAAAA,IAAA,6CACiBxB,EADjB,oBAC+BqB,IAHzB,cAEvBM,EAFuB,SAKSA,EAASnB,KAAvC6B,EALqB,EAKrBA,YAAaC,EALQ,EAKRA,aALQ,qCAOxBX,EAASnB,MAPe,IAQ3B6B,YAAAA,EACAC,aAAAA,KAT2B,sCAYvB,IAAIC,MAAM,gCAZa,yDAAH,sDAiBjBhC,EAAS,mCAAG,WAAOP,GAAP,oGAEEwB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACDtB,EADC,4BACqBqB,IAHvB,cAEfM,EAFe,OAKbxB,EAASwB,EAASnB,KAAlBL,KACFqC,EAAcrC,EAAKU,KAAI,SAACC,GAAD,eAAC,UACzBA,GADwB,IAE3B2B,YAAa3B,EAAMG,aAAN,0CAC0BH,EAAMG,cACzC,MAJuB,IANR,kBAYd,CACLd,KAAMqC,IAba,sCAgBf,IAAID,MAAM,gCAhBK,yDAAH,sDAmBTG,EAAY,mCAAG,WAAOP,GAAP,kGAEDX,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8Ba,EAA9B,YAAiD,CACtEV,OAAQ,CACNC,QAASL,KAJW,cAElBM,EAFkB,OAQlBgB,EAAUhB,EAASnB,KAAKqB,QARN,kBASjBc,GATiB,uCAWxBlC,QAAQC,MAAM,0BAAd,MAXwB,kBAYjB,IAZiB,yDAAH,qD","sources":["webpack://react-homework-template/./src/page/cast/Cast.module.css?8ed4","page/cast/Cast.js","serviсe/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__7fOsP\"};","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from '../../serviсe/Api';\nimport css from './Cast.module.css'\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState(null);\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const data = await fetchCast(id);\n        setCast(data.cast);\n      } catch (error) {\n        console.error(\"Error fetching movie cast:\", error);\n      }\n    };\n  \n    getCast();\n  }, [id]);\n  \n\n  return (\n    <div>\n      {cast ? (\n      <ul className={css.castList}>\n        {cast.map((actor) => (\n          <li key={actor.cast_id}>\n            <h3>{actor.name}</h3>\n            <p>Character: {actor.character}</p>\n            {actor.profile_path ? (\n              <img src={`https://image.tmdb.org/t/p/w400/${actor.profile_path}`} alt={actor.name} />\n            ) : (\n              <img src={defaultImg} alt={actor.name} />\n            )}\n          </li>\n        ))}\n      </ul>\n    ) : (\n      <p>Sorry, there is no such information at the moment.</p>\n    )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst ApiKey = 'ce6180729ed4220a4a998763c9b5bf5d';\nconst BaseUrl = 'https://api.themoviedb.org/3';\n\n export const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BaseUrl}/trending/movie/day`, {\n      params: {\n        api_key: ApiKey\n      }\n    });\n    const trendingMovies = response.data.results;\n    console.log(\"Отримано трендові фільми:\", trendingMovies);\n    return trendingMovies;\n  } catch (error) {\n    console.error('Помилка при отриманні трендових фільмів:', error);\n    return [];\n  }\n};\n\n// export const fetchSearchMovies = async (query) => {\n//   try {\n//     const response = await axios.get(`${BaseUrl}/search/movie`, {\n//       params: {\n//         api_key: ApiKey,\n//         query: query\n//       }\n//     });\n//     const data = response.data;\n//     return data;\n//   } catch (error) {\n//     console.error('Error fetching search movies:', error);\n//     throw error;\n//   }\n// }\nexport const fetchSearchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/search/movie`, {\n      params: {\n        api_key: ApiKey,\n        query: query\n      }\n    });\n    const data = response.data;\n    const moviesWithId = data.results.map(movie => ({\n      ...movie,\n      movieId: movie.id\n    }));\n\n    return {\n      ...data,\n      results: moviesWithId\n    };\n  } catch (error) {\n    console.error('Error fetching search movies:', error);\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${ApiKey}`\n    );\n    const { poster_path, vote_average } = response.data;\n    return {\n      ...response.data,\n      poster_path,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\n\n\nexport const fetchCast = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BaseUrl}/movie/${id}/credits?api_key=${ApiKey}`\n    );\n    const { cast } = response.data;\n    const updatedCast = cast.map((actor) => ({\n      ...actor,\n      profilePath: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n        : null,\n    }));\n    return {\n      cast: updatedCast,\n    };\n  } catch (error) {\n    throw new Error(\"Error fetching movie details\");\n  }\n};\nexport const fetchReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BaseUrl}/movie/${movieId}/reviews`, {\n      params: {\n        api_key: ApiKey,\n      },\n    });\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    return [];\n  }\n};\n\n\n\n\n\n\n"],"names":["id","useParams","useState","cast","setCast","useEffect","getCast","fetchCast","data","console","error","className","css","map","actor","name","character","profile_path","src","alt","cast_id","ApiKey","BaseUrl","fetchTrendingMovies","axios","params","api_key","response","trendingMovies","results","log","fetchSearchMovies","query","moviesWithId","movie","movieId","fetchMovieDetails","poster_path","vote_average","Error","updatedCast","profilePath","fetchReviews","reviews"],"sourceRoot":""}